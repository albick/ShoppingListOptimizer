// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShoppingListOptimizerAPI.Data.Infrastructure;

#nullable disable

namespace ShoppingListOptimizerAPI.Data.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20240406083709_seeding0")]
    partial class seeding0
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0",
                            ConcurrencyStamp = "a50f57a4-d3d5-4674-b5d8-403cb9416b75",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "9cab94c7-b4be-4232-b26d-64750a9367ef",
                            Name = "Shop",
                            NormalizedName = "SHOP"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "c1dd4f71-f6b6-4433-9f7b-7dc9d27f300a",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000000",
                            RoleId = "0"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000001",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000002",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000003",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000004",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000000",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ce768ab-f0bb-4705-beb3-b79d9c264527",
                            Email = "Account0@x.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ACCOUNT0@X.COM",
                            NormalizedUserName = "ADMIN0",
                            PasswordHash = "AQAAAAEAACcQAAAAEP3uYJp4AurpyY7NYMia5Dyt21MvCvGZOGSXW/RH+DEGdUyxNsyAmhZnigaSdiykpQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a3961caf-0302-4940-8ebf-29bc01e97bfe",
                            TwoFactorEnabled = false,
                            UserName = "Admin0"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "65341b4d-dbc3-4972-8308-0c3c3e8e5503",
                            Email = "Account1@x.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ACCOUNT1@X.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEApVIxb9Awx6xsF22jkhWCWW7bhqsqQt+79ZFR7yXbJ8hc0Fz8ZeOaVW9Eb0k9sc2A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e50f2df-2697-415b-ac7e-3b8b3c7976bf",
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ceba9665-21b2-46a7-bd52-9cc56a66cc01",
                            Email = "Account2@x.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ACCOUNT2@X.COM",
                            NormalizedUserName = "TESCO",
                            PasswordHash = "AQAAAAEAACcQAAAAECNQUwh12XcabmS6dSCgfa7aBB0mQ0dbh7o4TCBLYjaiV/6tPKHcau90E8MiOvZ9HQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5424316e-e0ef-4b4d-aed0-37490676be5f",
                            TwoFactorEnabled = false,
                            UserName = "Tesco"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f7c1a863-676d-4097-91bb-ccfc3310a8d9",
                            Email = "Account3@x.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ACCOUNT3@X.COM",
                            NormalizedUserName = "AUCHAN",
                            PasswordHash = "AQAAAAEAACcQAAAAEAVtRMvwnfAhXD/kXKf0oT2zYbE5cCzGqDSKxEXPb6kLe6AG6XBdrW+B5lNpZawClg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e664753c-a67c-4c6a-ae59-843954985bc0",
                            TwoFactorEnabled = false,
                            UserName = "Auchan"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "392c853a-f6ee-4b72-b5e3-1f6adaeb959e",
                            Email = "Account4@x.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ACCOUNT4@X.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAEAACcQAAAAEPCmHMA21Z+gAScOTasOLH0jEcRjY8RqnwdYXS/AdZWXmnLCvYd+VbhIYC9Ydd/FdA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ef4fb1f-b33f-42c8-ab72-eb1863eb2eb1",
                            TwoFactorEnabled = false,
                            UserName = "User4"
                        });
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.Item", b =>
                {
                    b.Property<string>("Barcode")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<double>("Quantity")
                        .HasColumnType("double");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Barcode")
                        .HasName("PK_Item");

                    b.HasIndex("CreatorId");

                    b.ToTable("Item", null, t =>
                        {
                            t.HasCheckConstraint("CK_Item_Name", "CHAR_LENGTH(Name) >= 3");

                            t.HasCheckConstraint("CK_Item_Quantity", "Quantity > 0");
                        });
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.ItemPriceEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ItemPriceEntry");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ShopId");

                    b.ToTable("ItemPriceEntry", null, t =>
                        {
                            t.HasCheckConstraint("CK_ItemPriceEntry_Price", "Price > 0");
                        });
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_Location");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Budaörs",
                            Latitude = 47.450125,
                            Longitude = 18.964566300000001,
                            Number = "1",
                            Postcode = "2040",
                            Street = "Kinizsi utca"
                        },
                        new
                        {
                            Id = 2,
                            City = "Budaörs",
                            Latitude = 47.454938749999997,
                            Longitude = 18.943733936449245,
                            Number = "2-4",
                            Postcode = "2040",
                            Street = "Sport utca"
                        },
                        new
                        {
                            Id = 3,
                            City = "Székesfehérvár",
                            Latitude = 47.190058999999998,
                            Longitude = 18.4041082,
                            Number = "6",
                            Postcode = "8000",
                            Street = "Palotai út"
                        },
                        new
                        {
                            Id = 4,
                            City = "Debrecen",
                            Latitude = 47.540409799999999,
                            Longitude = 21.583815048626832,
                            Number = "7",
                            Postcode = "4031",
                            Street = "Kishatár utca"
                        });
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.OpeningHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(6)");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(6)");

                    b.HasKey("Id")
                        .HasName("PK_OpeningHours");

                    b.HasIndex("ShopId");

                    b.ToTable("OpeningHours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DayOfWeek = 1,
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            ShopId = 1,
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            DayOfWeek = 2,
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            ShopId = 1,
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            DayOfWeek = 3,
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            ShopId = 1,
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            DayOfWeek = 4,
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            ShopId = 1,
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            DayOfWeek = 5,
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            ShopId = 1,
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            DayOfWeek = 6,
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            ShopId = 1,
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            DayOfWeek = 0,
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            ShopId = 1,
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            DayOfWeek = 1,
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            ShopId = 2,
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 9,
                            DayOfWeek = 2,
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            ShopId = 2,
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 10,
                            DayOfWeek = 3,
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            ShopId = 2,
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 11,
                            DayOfWeek = 4,
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            ShopId = 2,
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 12,
                            DayOfWeek = 5,
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            ShopId = 2,
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 13,
                            DayOfWeek = 6,
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            ShopId = 2,
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 14,
                            DayOfWeek = 0,
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            ShopId = 2,
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 15,
                            DayOfWeek = 1,
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            ShopId = 3,
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 16,
                            DayOfWeek = 2,
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            ShopId = 3,
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 17,
                            DayOfWeek = 3,
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            ShopId = 3,
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 18,
                            DayOfWeek = 4,
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            ShopId = 3,
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 19,
                            DayOfWeek = 5,
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            ShopId = 3,
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 20,
                            DayOfWeek = 6,
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            ShopId = 3,
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 21,
                            DayOfWeek = 0,
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            ShopId = 3,
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 22,
                            DayOfWeek = 1,
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            ShopId = 4,
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 23,
                            DayOfWeek = 2,
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            ShopId = 4,
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 24,
                            DayOfWeek = 3,
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            ShopId = 4,
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 25,
                            DayOfWeek = 4,
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            ShopId = 4,
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 26,
                            DayOfWeek = 5,
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            ShopId = 4,
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 27,
                            DayOfWeek = 6,
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            ShopId = 4,
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 28,
                            DayOfWeek = 0,
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            ShopId = 4,
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PK_Shop");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LocationId");

                    b.ToTable("Shop", null, t =>
                        {
                            t.HasCheckConstraint("CK_Shop_Name", "CHAR_LENGTH(Name) >= 3");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = "00000000-0000-0000-0000-000000000002",
                            CreatorId = "00000000-0000-0000-0000-000000000002",
                            Details = "Tesco Budaörs",
                            LocationId = 1,
                            Name = "TESCO Budaörs"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = "00000000-0000-0000-0000-000000000003",
                            CreatorId = "00000000-0000-0000-0000-000000000003",
                            Details = "Auchan Budaörs",
                            LocationId = 2,
                            Name = "AUCHAN Budaörs"
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = "00000000-0000-0000-0000-000000000002",
                            CreatorId = "00000000-0000-0000-0000-000000000002",
                            Details = "Tesco Székesfehérvár",
                            LocationId = 3,
                            Name = "TESCO Székesfehérvár"
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = "00000000-0000-0000-0000-000000000003",
                            CreatorId = "00000000-0000-0000-0000-000000000003",
                            Details = "Auchan Debrecen",
                            LocationId = 4,
                            Name = "AUCHAN Debrecen"
                        });
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.ShoppingList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PK_ShoppingList");

                    b.HasIndex("CreatorId");

                    b.ToTable("ShoppingList", null, t =>
                        {
                            t.HasCheckConstraint("CK_ShoppingList_Name", "CHAR_LENGTH(Name) >= 3");
                        });
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.ShoppingListItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<bool>("IsPriority")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ShoppingListId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ShoppingListItem");

                    b.HasIndex("ItemId");

                    b.HasIndex("ShoppingListId");

                    b.ToTable("ShoppingListItem", null, t =>
                        {
                            t.HasCheckConstraint("CK_ShoppingListItem_Count", "Count > 0");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.Account", b =>
                {
                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.Item", b =>
                {
                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Account", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.ItemPriceEntry", b =>
                {
                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Account", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Item");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.OpeningHours", b =>
                {
                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Shop", null)
                        .WithMany("OpeningHours")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.Shop", b =>
                {
                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Account", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Account", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Creator");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.ShoppingList", b =>
                {
                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Account", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.ShoppingListItem", b =>
                {
                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.ShoppingList", null)
                        .WithMany("ShoppingListItems")
                        .HasForeignKey("ShoppingListId");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.Shop", b =>
                {
                    b.Navigation("OpeningHours");
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.ShoppingList", b =>
                {
                    b.Navigation("ShoppingListItems");
                });
#pragma warning restore 612, 618
        }
    }
}
