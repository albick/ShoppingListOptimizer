// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShoppingListOptimizerAPI.Data.Infrastructure;

#nullable disable

namespace ShoppingListOptimizerAPI.Data.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20240403142649_seeding0")]
    partial class seeding0
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0",
                            ConcurrencyStamp = "12dc0b01-6ef1-4847-8f7d-937b0c3d4c07",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "9746a88b-aa11-43f4-8138-f707d9b3eca0",
                            Name = "Shop",
                            NormalizedName = "SHOP"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "ba43b4a5-286f-4d23-8746-6c0cab93517d",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000000",
                            RoleId = "0"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000001",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000002",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000003",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000004",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000000",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9e0aa2ce-5d77-4fbb-86f6-19d8a4053ec4",
                            Email = "Account0@x.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ACCOUNT0@X.COM",
                            NormalizedUserName = "ACCOUNT0",
                            PasswordHash = "AQAAAAEAACcQAAAAELsaAxvYu2B//oXw8l4RUMC+7U34ACO6l54LDhRgobcTs6Ss6SVz18S4qYe3I0yWxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "72c5ca34-d722-424a-9897-34df4407c9a5",
                            TwoFactorEnabled = false,
                            UserName = "Account0"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b0a7a73-08c0-4a00-89ea-5fb5c507839b",
                            Email = "Account1@x.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ACCOUNT1@X.COM",
                            NormalizedUserName = "ACCOUNT1",
                            PasswordHash = "AQAAAAEAACcQAAAAEJnWKcQjyT9OltJWi11WemUxKZMtJVhkr8Qw7pi+zob3TNxWe95quszNTODoKNg7EA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a05a43e-f287-4c4b-8bee-12ffe54532f1",
                            TwoFactorEnabled = false,
                            UserName = "Account1"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5f275d84-afc0-4946-a3ce-5773cbd3d8c8",
                            Email = "Account2@x.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ACCOUNT2@X.COM",
                            NormalizedUserName = "ACCOUNT2",
                            PasswordHash = "AQAAAAEAACcQAAAAEOnUuPU0Bzd7Ghay0ewLITzAVkfmiMndZmSVR0Z2EYug9hr/haqVOLhqBJyyvNjv3g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0ac1b040-7c8b-494d-a95b-17e6df48835c",
                            TwoFactorEnabled = false,
                            UserName = "Account2"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "41363038-33bf-4b6c-a4bd-a0c5de29de8f",
                            Email = "Account3@x.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ACCOUNT3@X.COM",
                            NormalizedUserName = "ACCOUNT3",
                            PasswordHash = "AQAAAAEAACcQAAAAEKkv2HbpiUQbHeLDk8xCDZShXVEPUh+HZfCStoczL9J5PKzeKS53o907ITQ8pSdAlQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c0045fb-5e34-4cac-9195-88deb8e7cb82",
                            TwoFactorEnabled = false,
                            UserName = "Account3"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a912cc05-5a73-4f86-8ceb-5d291e1e214d",
                            Email = "Account4@x.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ACCOUNT4@X.COM",
                            NormalizedUserName = "ACCOUNT4",
                            PasswordHash = "AQAAAAEAACcQAAAAEDqycilbI2nnaySKi8x/T5r3n/Ioy47e2XOq80GyJek8qVN9VasdVHNx3Xp8lamAEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9da38305-b65b-49f1-b069-79abc018fa6d",
                            TwoFactorEnabled = false,
                            UserName = "Account4"
                        });
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.Item", b =>
                {
                    b.Property<string>("Barcode")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<double>("Quantity")
                        .HasColumnType("double");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Barcode")
                        .HasName("PK_Item");

                    b.HasIndex("CreatorId");

                    b.ToTable("Item", null, t =>
                        {
                            t.HasCheckConstraint("CK_Item_Name", "CHAR_LENGTH(Name) >= 3");

                            t.HasCheckConstraint("CK_Item_Quantity", "Quantity > 0");
                        });
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.ItemPriceEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ItemPriceEntry");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ShopId");

                    b.ToTable("ItemPriceEntry", null, t =>
                        {
                            t.HasCheckConstraint("CK_ItemPriceEntry_Price", "Price > 0");
                        });
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_Location");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.OpeningHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(6)");

                    b.Property<int?>("ShopId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(6)");

                    b.HasKey("Id")
                        .HasName("PK_OpeningHours");

                    b.HasIndex("ShopId");

                    b.ToTable("OpeningHours");
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PK_Shop");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LocationId");

                    b.ToTable("Shop", null, t =>
                        {
                            t.HasCheckConstraint("CK_Shop_Name", "CHAR_LENGTH(Name) >= 3");
                        });
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.ShoppingList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PK_ShoppingList");

                    b.HasIndex("CreatorId");

                    b.ToTable("ShoppingList", null, t =>
                        {
                            t.HasCheckConstraint("CK_ShoppingList_Name", "CHAR_LENGTH(Name) >= 3");
                        });
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.ShoppingListItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<bool>("IsPriority")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ShoppingListId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ShoppingListItem");

                    b.HasIndex("ItemId");

                    b.HasIndex("ShoppingListId");

                    b.ToTable("ShoppingListItem", null, t =>
                        {
                            t.HasCheckConstraint("CK_ShoppingListItem_Count", "Count > 0");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.Account", b =>
                {
                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.Item", b =>
                {
                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Account", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.ItemPriceEntry", b =>
                {
                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Account", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Item");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.OpeningHours", b =>
                {
                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Shop", null)
                        .WithMany("OpeningHours")
                        .HasForeignKey("ShopId");
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.Shop", b =>
                {
                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Account", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Account", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Creator");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.ShoppingList", b =>
                {
                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Account", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.ShoppingListItem", b =>
                {
                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoppingListOptimizerAPI.Data.Models.ShoppingList", null)
                        .WithMany("ShoppingListItems")
                        .HasForeignKey("ShoppingListId");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.Shop", b =>
                {
                    b.Navigation("OpeningHours");
                });

            modelBuilder.Entity("ShoppingListOptimizerAPI.Data.Models.ShoppingList", b =>
                {
                    b.Navigation("ShoppingListItems");
                });
#pragma warning restore 612, 618
        }
    }
}
